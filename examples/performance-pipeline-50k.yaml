pipeline:
  name: "Performance Test Pipeline - 50K Records"
  version: "1.0.0"
  description: "Performance test with 50K records and optimized chunk size"
  
  plugins:
    # Source: Read 50K customer records from CSV file
    - name: "TestSource"
      type: "DelimitedSource"
      config:
        FilePath: "C:\\source\\FlowEngine\\examples\\data\\customers-50k.csv"
        HasHeaders: true
        Delimiter: ","
        ChunkSize: 1000
        Encoding: "UTF-8"
        InferSchema: false
        OutputSchema:
          Name: "CustomerData"
          Description: "Customer information schema"
          Columns:
            - Name: "customer_id"
              Type: "Integer"
              Index: 0
              IsNullable: false
            - Name: "first_name"
              Type: "String"
              Index: 1
              IsNullable: false
            - Name: "last_name"
              Type: "String"
              Index: 2
              IsNullable: false
            - Name: "age"
              Type: "Integer"
              Index: 3
              IsNullable: false
            - Name: "email"
              Type: "String"
              Index: 4
              IsNullable: false
            - Name: "account_value"
              Type: "Decimal"
              Index: 5
              IsNullable: false
        SkipMalformedRows: true
        MaxErrors: 100
        
    # Transform: Enrich customer data with JavaScript logic (same as simplified pipeline)
    - name: "CustomerTransform"
      type: "JavaScriptTransform"
      config:
        OutputSchema:
          Name: "ProcessedCustomerData"
          Description: "Customer data with transformations and enrichments"
          Columns:
            - Name: "customer_id"
              Type: "Integer"
              Index: 0
              IsNullable: false
            - Name: "full_name"
              Type: "String"
              Index: 1
              IsNullable: false
            - Name: "first_name"
              Type: "String"
              Index: 2
              IsNullable: false
            - Name: "last_name"
              Type: "String"
              Index: 3
              IsNullable: false
            - Name: "age"
              Type: "Integer"
              Index: 4
              IsNullable: false
            - Name: "age_category"
              Type: "String"
              Index: 5
              IsNullable: false
            - Name: "email"
              Type: "String"
              Index: 6
              IsNullable: false
            - Name: "email_domain"
              Type: "String"
              Index: 7
              IsNullable: false
            - Name: "account_value"
              Type: "Decimal"
              Index: 8
              IsNullable: false
            - Name: "value_category"
              Type: "String"
              Index: 9
              IsNullable: false
            - Name: "priority_score"
              Type: "Integer"
              Index: 10
              IsNullable: false
            - Name: "processed_date"
              Type: "String"
              Index: 11
              IsNullable: false
        Script: |
          function process(context) {
              try {
                  var customer = context.input.current();
                  
                  if (!customer.first_name || !customer.last_name) {
                      context.utils.log('warning', 'Missing name data for customer ID: ' + customer.customer_id);
                      return false;
                  }
                  
                  var fullName = customer.first_name + ' ' + customer.last_name;
                  
                  var age = parseInt(customer.age);
                  var ageCategory = 'Unknown';
                  if (age < 25) ageCategory = 'Young Adult';
                  else if (age < 45) ageCategory = 'Adult';
                  else if (age < 65) ageCategory = 'Middle Age';
                  else ageCategory = 'Senior';
                  
                  var emailDomain = customer.email ? customer.email.split('@')[1] : 'unknown';
                  
                  var accountValue = parseFloat(customer.account_value || 0);
                  var valueCategory = 'Standard';
                  if (accountValue >= 100000) valueCategory = 'Premium';
                  else if (accountValue >= 50000) valueCategory = 'Gold';
                  else if (accountValue >= 10000) valueCategory = 'Silver';
                  
                  var priorityScore = 0;
                  if (valueCategory === 'Premium') priorityScore += 40;
                  else if (valueCategory === 'Gold') priorityScore += 30;
                  else if (valueCategory === 'Silver') priorityScore += 20;
                  else priorityScore += 10;
                  
                  if (ageCategory === 'Adult' || ageCategory === 'Middle Age') priorityScore += 20;
                  if (emailDomain.includes('gmail') || emailDomain.includes('yahoo')) priorityScore += 10;
                  
                  context.output.setField('customer_id', customer.customer_id);
                  context.output.setField('full_name', fullName);
                  context.output.setField('first_name', customer.first_name);
                  context.output.setField('last_name', customer.last_name);
                  context.output.setField('age', age);
                  context.output.setField('age_category', ageCategory);
                  context.output.setField('email', customer.email);
                  context.output.setField('email_domain', emailDomain);
                  context.output.setField('account_value', accountValue);
                  context.output.setField('value_category', valueCategory);
                  context.output.setField('priority_score', priorityScore);
                  context.output.setField('processed_date', new Date().toISOString());
                  
                  return true;
                  
              } catch (error) {
                  context.utils.log('error', 'Transform error: ' + error.message);
                  return false;
              }
          }
        ChunkSize: 1000
        TimeoutSeconds: 30
        
    # Sink: Write processed data to CSV file
    - name: "TestOutput"
      type: "DelimitedSink"
      config:
        FilePath: "C:\\source\\FlowEngine\\examples\\output\\performance-test-50k.csv"
        HasHeaders: true
        Delimiter: ","
        Encoding: "UTF-8"
        BufferSize: 65536
        FlushInterval: 1000
        CreateDirectory: true
        OverwriteExisting: false
        
  connections:
    # Customer data flows from source to transform
    - from: "TestSource"
      to: "CustomerTransform"
      channel:
        bufferSize: 2000
        backpressureThreshold: 75
        fullMode: "Wait"
        timeoutSeconds: 30
        
    # Transformed data flows to output
    - from: "CustomerTransform"
      to: "TestOutput"
      channel:
        bufferSize: 2000
        backpressureThreshold: 75
        fullMode: "Wait"
        timeoutSeconds: 30
        
  settings:
    defaultChannel:
      bufferSize: 2000
      backpressureThreshold: 80
      fullMode: "Wait"
      timeoutSeconds: 30
    
    monitoring:
      enableMetrics: true
      metricsIntervalSeconds: 5
      enableTracing: false
      custom:
        logLevel: "Information"
        
    custom:
      performance:
        maxConcurrentPlugins: 4
        memoryLimitMB: 512
        gcPressureThreshold: 0.8
        
      errorHandling:
        maxRetries: 3
        retryDelaySeconds: 1
        stopOnError: false
        logErrors: true