Pipeline:
  Name: "Customer Data Processing Pipeline - Simplified"
  Version: "1.0.0"
  Description: "Real-world example with automatic plugin type resolution"
  
  Plugins:
    # Source: Read customer data from CSV file - using short name
    - Name: "CustomerSource"
      Type: "DelimitedSource"  # Short name instead of DelimitedSource.DelimitedSourcePlugin
      Config:
        FilePath: "C:\\source\\FlowEngine\\examples\\data\\customers.csv"
        HasHeaders: true
        Delimiter: ","
        ChunkSize: 5000
        Encoding: "UTF-8"
        InferSchema: false
        OutputSchema:
          Name: "CustomerData"
          Description: "Customer information schema"
          Columns:
            - Name: "customer_id"
              Type: "int32"
              Index: 0
              IsNullable: false
            - Name: "first_name"
              Type: "string"
              Index: 1
              IsNullable: false
            - Name: "last_name"
              Type: "string"
              Index: 2
              IsNullable: false
            - Name: "age"
              Type: "int32"
              Index: 3
              IsNullable: false
            - Name: "email"
              Type: "string"
              Index: 4
              IsNullable: false
            - Name: "account_value"
              Type: "decimal"
              Index: 5
              IsNullable: false
        SkipMalformedRows: true
        MaxErrors: 10
        
    # Transform: Enrich customer data with JavaScript logic - using short name
    - Name: "CustomerTransform"
      Type: "JavaScriptTransform"  # Short name instead of JavaScriptTransform.JavaScriptTransformPlugin
      Config:
        OutputSchema:
          Fields:
            - Name: "customer_id"
              Type: "integer"
              Required: true
            - Name: "full_name"
              Type: "string"
              Required: true
            - Name: "first_name"
              Type: "string"
              Required: true
            - Name: "last_name"
              Type: "string"
              Required: true
            - Name: "age"
              Type: "integer"
              Required: true
            - Name: "age_category"
              Type: "string"
              Required: true
            - Name: "email"
              Type: "string"
              Required: true
            - Name: "email_domain"
              Type: "string"
              Required: true
            - Name: "account_value"
              Type: "decimal"
              Required: true
            - Name: "value_category"
              Type: "string"
              Required: true
            - Name: "priority_score"
              Type: "integer"
              Required: true
            - Name: "processed_date"
              Type: "string"
              Required: true
        Script: |
          function process(context) {
              try {
                  // Get current row data
                  var customer = context.input.current();
                  
                  // Basic validation
                  if (!customer.first_name || !customer.last_name) {
                      context.utils.log('warning', 'Missing name data for customer ID: ' + customer.customer_id);
                      return false; // Skip this row
                  }
                  
                  // Transform: Create full name
                  var fullName = customer.first_name + ' ' + customer.last_name;
                  
                  // Transform: Categorize age
                  var age = parseInt(customer.age);
                  var ageCategory = 'Unknown';
                  if (age < 25) ageCategory = 'Young Adult';
                  else if (age < 45) ageCategory = 'Adult';
                  else if (age < 65) ageCategory = 'Middle Age';
                  else ageCategory = 'Senior';
                  
                  // Transform: Email domain extraction
                  var emailDomain = customer.email ? customer.email.split('@')[1] : 'unknown';
                  
                  // Transform: Calculate account value category
                  var accountValue = parseFloat(customer.account_value || 0);
                  var valueCategory = 'Standard';
                  if (accountValue >= 100000) valueCategory = 'Premium';
                  else if (accountValue >= 50000) valueCategory = 'Gold';
                  else if (accountValue >= 10000) valueCategory = 'Silver';
                  
                  // Transform: Generate priority score
                  var priorityScore = 0;
                  if (valueCategory === 'Premium') priorityScore += 40;
                  else if (valueCategory === 'Gold') priorityScore += 30;
                  else if (valueCategory === 'Silver') priorityScore += 20;
                  else priorityScore += 10;
                  
                  if (ageCategory === 'Adult' || ageCategory === 'Middle Age') priorityScore += 20;
                  if (emailDomain.includes('gmail') || emailDomain.includes('yahoo')) priorityScore += 10;
                  
                  // Set output fields
                  context.output.setField('customer_id', customer.customer_id);
                  context.output.setField('full_name', fullName);
                  context.output.setField('first_name', customer.first_name);
                  context.output.setField('last_name', customer.last_name);
                  context.output.setField('age', age);
                  context.output.setField('age_category', ageCategory);
                  context.output.setField('email', customer.email);
                  context.output.setField('email_domain', emailDomain);
                  context.output.setField('account_value', accountValue);
                  context.output.setField('value_category', valueCategory);
                  context.output.setField('priority_score', priorityScore);
                  context.output.setField('processed_date', new Date().toISOString());
                  
                  return true; // Successfully processed
                  
              } catch (error) {
                  context.utils.log('error', 'Transform error: ' + error.message);
                  return false; // Skip row on error
              }
          }
        
    # Sink: Write processed data to CSV file - using short name
    - Name: "ProcessedOutput"
      Type: "DelimitedSink"  # Short name instead of DelimitedSink.DelimitedSinkPlugin
      Config:
        FilePath: "C:\\source\\FlowEngine\\examples\\output\\processed-customers-simplified.csv"
        HasHeaders: true
        Delimiter: ","
        Encoding: "UTF-8"
        BufferSize: 8192
        FlushInterval: 1000
        CreateDirectory: true
        OverwriteExisting: true
        
  Connections:
    # Customer data flows from source to transform
    - From: "CustomerSource"
      To: "CustomerTransform"
      Channel:
        BufferSize: 2000
        BackpressureThreshold: 75
        FullMode: "Wait"
        TimeoutSeconds: 45
        
    # Transformed data flows to output
    - From: "CustomerTransform"
      To: "ProcessedOutput"
      Channel:
        BufferSize: 1500
        BackpressureThreshold: 80
        FullMode: "Wait"
        TimeoutSeconds: 30

  Settings:
    DefaultChannel:
      BufferSize: 1000
      BackpressureThreshold: 80
      FullMode: "Wait"
      TimeoutSeconds: 30
    
    Monitoring:
      EnableMetrics: true
      MetricsIntervalSeconds: 5
      EnableTracing: true
      Custom:
        LogLevel: "Information"
        
    Custom:
      Performance:
        MaxConcurrentPlugins: 3
        MemoryLimitMB: 512
        GcPressureThreshold: 0.8
        
      ErrorHandling:
        MaxRetries: 3
        RetryDelaySeconds: 2
        StopOnError: false
        LogErrors: true